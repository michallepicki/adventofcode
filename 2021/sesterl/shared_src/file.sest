module File = struct

  val read_file : fun(binary) -> option<binary> = external 1 ```
    read_file(Path) ->
      case file:read_file(Path) of
        {ok, Binary} -> {ok, Binary};
        _ -> error
      end.
  ```

  type descriptor =
    | FileDescriptorDummy

  /* open is a keyword so can't be our function name */
  val open_file : fun(binary) -> option<descriptor> = external 1 ```
    open_file(Path) ->
      case file:open(Path, [binary]) of
        {ok, Fd} -> {ok, Fd};
        _ -> error
      end.
  ```

  type read_error =
    | Eof
    | OtherFileReadError

  val read_line : fun(descriptor) -> result<binary, read_error> = external 1 ```
    read_line(FileDescriptor) ->
      case file:read_line(FileDescriptor) of
        {ok, Data} -> {ok, Data};
        eof -> {error, eof};
        _ -> {error, other_file_read_error}
      end.
  ```

end
