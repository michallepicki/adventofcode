module Binary = struct

  val trim : fun(binary) -> binary = external 1 ```
    trim(Binary) -> string:trim(Binary).
  ```

  val to_int : fun(binary) -> int = external 1 ```
    to_int(Binary) -> erlang:binary_to_integer(Binary).
  ```

  type split_target =
  | #[atom("leading")] SplitLeading
  | #[atom("trailing")] SplitTrailing
  | #[atom("all")] SplitAll

  val do_split : fun(binary, binary, option<split_target>) -> list<binary> = external 3 ```
    do_split(Binary, Pattern, MaybeSplitTarget) ->
      case MaybeSplitTarget of
        error -> string:split(Binary, Pattern);
        {ok, Where} -> string:split(Binary, Pattern, Where)
      end.
  ```

  val split(bin, pattern, ?where where) =
    do_split(bin, pattern, where)

end
