import File
import Binary

module Main = struct

  val rec count_measurement_increases(file, maybe_prev1, maybe_prev2, maybe_prev3, p1_count, p2_count) =
    case File.read_line(file) of
    | Error(_) -> {p1_count, p2_count}
    | Ok(line) ->
        let measurement = Binary.to_int(Binary.trim(line)) in
        let new_p1_count =
          case maybe_prev3 of
          | None -> p1_count
          | Some(previous) ->
              if previous < measurement then
                p1_count + 1
              else
                p1_count
          end in
        let new_p2_count =
          case {maybe_prev1, maybe_prev2, maybe_prev3} of
          | {None, _, _} -> p2_count
          | {Some(previous1), Some(previous2), Some(previous3)} ->
              if (previous1 + previous2 + previous3) < (previous2 + previous3 + measurement) then
                p2_count + 1
              else
                p2_count
          end in
        count_measurement_increases(file, maybe_prev2, maybe_prev3, Some(measurement), new_p1_count, new_p2_count)
    end

  val main() =
    let Some(file) = File.open_file("../../1") in
    let {p1, p2} = count_measurement_increases(file, None, None, None, 0, 0) in
    let _ = print_debug(p1) in
    print_debug(p2)

end
