import File
import Binary
import List
import Set

module Main = struct

  type point =
    | Point(int, int)

  type line =
    | Line(point, point)

  val rec parse_lines(file, ?acc acc) =
    let acc = case acc of | None -> [] | Some(acc) -> acc end in
    case File.read_line(file) of
    | Error(_) -> Stdlib.List.reverse(acc)
    | Ok(line) ->
      let [from, to] = Binary.split(Binary.trim(line), " -> ") in
      let [from_x, from_y] = Binary.split(from, ",") in
      let [to_x, to_y] = Binary.split(to, ",") in
      let line =
        Line(
          Point(Binary.to_int(from_x), Binary.to_int(from_y)),
          Point(Binary.to_int(to_x), Binary.to_int(to_y))
        ) in
      parse_lines(file, ?acc line :: acc)
    end

  val is_horizontal(Line(Point(x1, y1), Point(x2, y2))) =
    if x1 == x2 then true else false

  val is_vertical(Line(Point(x1, y1), Point(x2, y2))) =
    if y1 == y2 then true else false

  val is_horizontal_or_vertical(line) =
    if is_horizontal(line) then true else
    if is_vertical(line) then true else false

  val swap_ends(Line(from, to)) = Line(to, from)

  val normalize(line) =
    let Line(Point(x1, y1), Point(x2, y2)) = line in
    if is_horizontal(line) then
      if y1 <= y2 then line else swap_ends(line)
    else
      if x1 <= x2 then line else swap_ends(line)

  val is_diagonal_downwards(Line(Point(x1, y1), Point(x2, y2))) =
    let known = if x1 < x2 then if y1 < y2 then true else false else false in
    if known then true else
    if x2 < x1 then if y2 < y1 then true else false else false

  val step(line) =
    let Line(from, to) = line in
    let Point(x, y) = from in
    if is_horizontal(line) then
      Line(Point(x, y + 1), to)
    else if is_vertical(line) then
      Line(Point(x + 1, y), to)
    else if is_diagonal_downwards(line) then
      Line(Point(x + 1, y + 1), to)
    else
      Line(Point(x + 1, y - 1), to)

  /* term comparison operators requested in https://github.com/gfngfn/Sesterl/issues/60 */
  val equal<$a> : fun($a, $a) -> bool = external 2 ```
    equal(A, B) -> A == B.
  ```

  val rec to_points(line, ?acc acc) =
    let acc = case acc of | None -> [] | Some(acc) -> acc end in
    let Line(from, to) = line in
    if equal(from, to) then
      from :: acc
    else
      to_points(step(line), ?acc from :: acc)

  val rec count_duplicates(list, ?acc acc) =
    let acc = case acc of | None -> {Set.new(), Set.new(), 0} | Some(acc) -> acc end in
    let {uniques, duplicates, n} = acc in
    case list of
    | [] -> acc
    | el :: rest ->
      let acc = if Set.has(el, uniques) then
          if Set.has(el, duplicates) then
            acc
          else
            {uniques, Set.add(el, duplicates), n + 1}
        else {Set.add(el, uniques), duplicates, n} in
      count_duplicates(rest, ?acc acc)
    end

  val main() =
    let Some(file) = File.open_file("../../5") in
    let lines = parse_lines(file) in
    let normalized = Stdlib.List.map(normalize, lines) in
    let p1_lines = Stdlib.List.filter(is_horizontal_or_vertical, normalized) in
    let p1_lines_as_points = Stdlib.List.map(fun(line) -> to_points(line) end, p1_lines) in
    let p1_all_points = List.concat(p1_lines_as_points) in
    let {_, _, p1_duplicates} = count_duplicates(p1_all_points) in
    let _ = print_debug(p1_duplicates) in
    let p2_lines_as_points = Stdlib.List.map(fun(line) -> to_points(line) end, normalized) in
    let p2_all_points = List.concat(p2_lines_as_points) in
    let {_, _, p2_duplicates} = count_duplicates(p2_all_points) in
    print_debug(p2_duplicates)


end
